/**
 * CategoryFilter„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„ÉÜ„Çπ„Éà
 */

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import { CategoryFilter, filterFindingsByCategory, useCategoryFilter } from '../../src/app/components/results/CategoryFilter';
import { EnhancedFinding } from '../../src/app/types/api';

// „ÉÜ„Çπ„ÉàÁî®„ÅÆ„É¢„ÉÉ„ÇØ„Éá„Éº„Çø
const mockFindings: EnhancedFinding[] = [
  {
    original_phrase: "„Ç¢„ÉÉ„Éà„Éõ„Éº„É†„Å™ËÅ∑Â†¥",
    potential_realities: ["ÂØÜ„Å™‰∫∫ÈñìÈñ¢‰øÇ"],
    points_to_check: ["ÂÖ∑‰ΩìÁöÑ„Å™‰æã„ÇíËÅû„Åè"],
    severity: 'medium',
    category: 'culture',
    confidence: 0.8,
    related_keywords: ['ËÅ∑Â†¥Áí∞Â¢É'],
    suggested_questions: ['„Å©„ÅÆ„Çà„ÅÜ„Å™ÁÇπ„Åå„Ç¢„ÉÉ„Éà„Éõ„Éº„É†„Åß„Åô„ÅãÔºü']
  },
  {
    original_phrase: "„ÇÑ„Çä„Åå„ÅÑ„ÅÆ„ÅÇ„Çã‰ªï‰∫ã",
    potential_realities: ["Èï∑ÊôÇÈñìÂä¥ÂÉç„ÅÆÂèØËÉΩÊÄß"],
    points_to_check: ["Âä¥ÂÉçÊôÇÈñì„ÇíÁ¢∫Ë™ç"],
    severity: 'high',
    category: 'worklife',
    confidence: 0.9,
    related_keywords: ['Âä¥ÂÉçÊôÇÈñì'],
    suggested_questions: ['ÊÆãÊ•≠ÊôÇÈñì„ÅØ„Å©„ÅÆÁ®ãÂ∫¶„Åß„Åô„ÅãÔºü']
  },
  {
    original_phrase: "ÊàêÈï∑„Åß„Åç„ÇãÁí∞Â¢É",
    potential_realities: ["Á†î‰øÆÂà∂Â∫¶„ÅåÂÖÖÂÆü"],
    points_to_check: ["Á†î‰øÆÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç"],
    severity: 'low',
    category: 'growth',
    confidence: 0.7,
    related_keywords: ['Á†î‰øÆ'],
    suggested_questions: ['„Å©„ÅÆ„Çà„ÅÜ„Å™Á†î‰øÆ„Åå„ÅÇ„Çä„Åæ„Åô„ÅãÔºü']
  }
];

describe('CategoryFilter', () => {
  const mockOnCategoryChange = jest.fn();
  const defaultProps = {
    findings: mockFindings,
    selectedCategories: ['culture', 'worklife', 'growth'] as const,
    onCategoryChange: mockOnCategoryChange,
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Âü∫Êú¨ÁöÑ„Å™Ë°®Á§∫', () => {
    it('„Ç´„ÉÜ„Ç¥„É™„Éï„Ç£„É´„Çø„Éº„ÅÆ„Çø„Ç§„Éà„É´„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<CategoryFilter {...defaultProps} />);

      expect(screen.getByText('„Ç´„ÉÜ„Ç¥„É™„Éï„Ç£„É´„Çø„Éº')).toBeInTheDocument();
    });

    it('Âà©Áî®ÂèØËÉΩ„Å™„Ç´„ÉÜ„Ç¥„É™„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<CategoryFilter {...defaultProps} />);

      expect(screen.getByText('üè¢ ‰ºÅÊ•≠ÊñáÂåñ')).toBeInTheDocument();
      expect(screen.getByText('‚è∞ Âä¥ÂÉçÁí∞Â¢É')).toBeInTheDocument();
      expect(screen.getByText('üìà ÊàêÈï∑Ê©ü‰ºö')).toBeInTheDocument();
    });

    it('ÂêÑ„Ç´„ÉÜ„Ç¥„É™„ÅÆ‰ª∂Êï∞„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<CategoryFilter {...defaultProps} />);

      // Ë§áÊï∞„ÅÆ„Äå1‰ª∂„Äç„Åå„ÅÇ„Çã„ÅÆ„Åß„ÄÅgetAllByText„Çí‰ΩøÁî®
      const countElements = screen.getAllByText('1‰ª∂');
      expect(countElements).toHaveLength(3); // 3„Å§„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Åù„Çå„Åû„Çå„Å´1‰ª∂
    });

    it('„Ç´„ÉÜ„Ç¥„É™„ÅÆË™¨Êòé„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<CategoryFilter {...defaultProps} />);

      expect(screen.getByText('ËÅ∑Â†¥Áí∞Â¢É„ÄÅÁ§æÈ¢®„ÄÅ‰∫∫ÈñìÈñ¢‰øÇ„Å´Èñ¢„Åô„ÇãË°®Áèæ')).toBeInTheDocument();
      expect(screen.getByText('Âã§ÂãôÊôÇÈñì„ÄÅÊÆãÊ•≠„ÄÅÂÉç„ÅçÊñπ„Å´Èñ¢„Åô„ÇãË°®Áèæ')).toBeInTheDocument();
      expect(screen.getByText('„Ç≠„É£„É™„Ç¢„ÄÅ„Çπ„Ç≠„É´„Ç¢„ÉÉ„Éó„ÄÅÊòáÈÄ≤„Å´Èñ¢„Åô„ÇãË°®Áèæ')).toBeInTheDocument();
    });
  });

  describe('„Ç´„ÉÜ„Ç¥„É™ÈÅ∏Êäû', () => {
    it('„Ç´„ÉÜ„Ç¥„É™„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®ÈÅ∏ÊäûÁä∂ÊÖã„ÅåÂàá„ÇäÊõø„Çè„Çã', () => {
      render(<CategoryFilter {...defaultProps} />);

      const cultureButton = screen.getByText('üè¢ ‰ºÅÊ•≠ÊñáÂåñ').closest('button');
      fireEvent.click(cultureButton!);

      expect(mockOnCategoryChange).toHaveBeenCalledWith(['worklife', 'growth']);
    });

    it('ÈÅ∏Êäû„Åï„Çå„Åü„Ç´„ÉÜ„Ç¥„É™„Å´„ÉÅ„Çß„ÉÉ„ÇØ„Éû„Éº„ÇØ„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<CategoryFilter {...defaultProps} />);

      // ÈÅ∏Êäû„Åï„Çå„Åü„Ç´„ÉÜ„Ç¥„É™„Å´„ÉÅ„Çß„ÉÉ„ÇØ„Éû„Éº„ÇØ„Åå„ÅÇ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      const cultureButton = screen.getByText('üè¢ ‰ºÅÊ•≠ÊñáÂåñ').closest('button');
      expect(cultureButton?.querySelector('svg')).toBeInTheDocument();
    });

    it('ÂÖ®ÈÅ∏Êäû„Éú„Çø„É≥„ÅåÊ©üËÉΩ„Åô„Çã', () => {
      const props = {
        ...defaultProps,
        selectedCategories: ['culture'] as const
      };
      render(<CategoryFilter {...props} />);

      const selectAllButton = screen.getByText('ÂÖ®ÈÅ∏Êäû').closest('button');
      fireEvent.click(selectAllButton!);

      expect(mockOnCategoryChange).toHaveBeenCalledWith(['culture', 'worklife', 'growth']);
    });

    it('ÂÖ®Ëß£Èô§„Éú„Çø„É≥„ÅåÊ©üËÉΩ„Åô„Çã', () => {
      render(<CategoryFilter {...defaultProps} />);

      const deselectAllButton = screen.getByText('ÂÖ®Ëß£Èô§').closest('button');
      fireEvent.click(deselectAllButton!);

      expect(mockOnCategoryChange).toHaveBeenCalledWith([]);
    });

    it('„É™„Çª„ÉÉ„Éà„Éú„Çø„É≥„ÅåÊ©üËÉΩ„Åô„Çã', () => {
      const props = {
        ...defaultProps,
        selectedCategories: ['culture'] as const
      };
      render(<CategoryFilter {...props} />);

      const resetButton = screen.getByText('„É™„Çª„ÉÉ„Éà').closest('button');
      fireEvent.click(resetButton!);

      expect(mockOnCategoryChange).toHaveBeenCalledWith(['culture', 'worklife', 'growth']);
    });
  });

  describe('„Ç≥„É≥„Éë„ÇØ„ÉàË°®Á§∫', () => {
    it('„Ç≥„É≥„Éë„ÇØ„ÉàË°®Á§∫„Åß„Éï„Ç£„É´„Çø„Éº„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(<CategoryFilter {...defaultProps} compact={true} />);

      expect(screen.getByText('„Éï„Ç£„É´„Çø„Éº')).toBeInTheDocument();
    });

    it('„Éï„Ç£„É´„Çø„Éº„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åô„Çã„Å®Â±ïÈñã„Åï„Çå„Çã', () => {
      render(<CategoryFilter {...defaultProps} compact={true} />);

      const filterButton = screen.getByText('„Éï„Ç£„É´„Çø„Éº').closest('button');
      fireEvent.click(filterButton!);

      expect(screen.getByText('üè¢ ‰ºÅÊ•≠ÊñáÂåñ')).toBeInTheDocument();
    });

    it('„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Éï„Ç£„É´„Çø„Éº„Åå„ÅÇ„ÇãÂ†¥Âêà„Å´„Éê„ÉÉ„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const props = {
        ...defaultProps,
        selectedCategories: ['culture', 'worklife'] as const,
        compact: true
      };
      render(<CategoryFilter {...props} />);

      expect(screen.getByText('2')).toBeInTheDocument();
    });
  });

  describe('„Éï„Ç£„É´„Çø„ÉºÁä∂ÊÖãË°®Á§∫', () => {
    it('„Éï„Ç£„É´„Çø„Éº„ÅåÈÅ©Áî®„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„Å´Áä∂ÊÖã„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const props = {
        ...defaultProps,
        selectedCategories: ['culture', 'worklife'] as const
      };
      render(<CategoryFilter {...props} />);

      // „ÉÜ„Ç≠„Çπ„Éà„ÅåÂàÜÂâ≤„Åï„Çå„Å¶„ÅÑ„Çã„ÅÆ„Åß„ÄÅÈÉ®ÂàÜÁöÑ„Å´„Éû„ÉÉ„ÉÅ„Åï„Åõ„Çã
      expect(screen.getByText(/2ÂÄã„ÅÆ„Ç´„ÉÜ„Ç¥„É™„ÇíË°®Á§∫‰∏≠/)).toBeInTheDocument();
      expect(screen.getByText(/ÂÖ®3„Ç´„ÉÜ„Ç¥„É™‰∏≠/)).toBeInTheDocument();
    });

    it('ÂÖ®„Ç´„ÉÜ„Ç¥„É™„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÁä∂ÊÖãË°®Á§∫„Åï„Çå„Å™„ÅÑ', () => {
      render(<CategoryFilter {...defaultProps} />);

      expect(screen.queryByText(/ÂÄã„ÅÆ„Ç´„ÉÜ„Ç¥„É™„ÇíË°®Á§∫‰∏≠/)).not.toBeInTheDocument();
    });
  });

  describe('‰ª∂Êï∞„Åå0„ÅÆ„Ç´„ÉÜ„Ç¥„É™', () => {
    it('‰ª∂Êï∞„Åå0„ÅÆ„Ç´„ÉÜ„Ç¥„É™„ÅØË°®Á§∫„Åï„Çå„Å™„ÅÑ', () => {
      const findingsWithoutCompensation = mockFindings.filter(f => f.category !== 'compensation');
      const props = {
        ...defaultProps,
        findings: findingsWithoutCompensation,
        selectedCategories: ['culture', 'worklife', 'growth'] as const
      };
      render(<CategoryFilter {...props} />);

      expect(screen.queryByText('üí∞ Áµ¶‰∏é„ÉªÂæÖÈÅá')).not.toBeInTheDocument();
    });
  });
});

describe('filterFindingsByCategory', () => {
  it('ÈÅ∏Êäû„Åï„Çå„Åü„Ç´„ÉÜ„Ç¥„É™„ÅÆÁµêÊûú„ÅÆ„Åø„ÇíËøî„Åô', () => {
    const result = filterFindingsByCategory(mockFindings, ['culture', 'growth']);

    expect(result).toHaveLength(2);
    expect(result[0].category).toBe('culture');
    expect(result[1].category).toBe('growth');
  });

  it('Á©∫„ÅÆÈÅ∏Êäû„Ç´„ÉÜ„Ç¥„É™„ÅÆÂ†¥Âêà„ÅØÂÖ®„Å¶„ÅÆÁµêÊûú„ÇíËøî„Åô', () => {
    const result = filterFindingsByCategory(mockFindings, []);

    expect(result).toHaveLength(3);
    expect(result).toEqual(mockFindings);
  });

  it('Â≠òÂú®„Åó„Å™„ÅÑ„Ç´„ÉÜ„Ç¥„É™„ÇíÈÅ∏Êäû„Åó„ÅüÂ†¥Âêà„ÅØÁ©∫„ÅÆÈÖçÂàó„ÇíËøî„Åô', () => {
    const result = filterFindingsByCategory(mockFindings, ['compensation']);

    expect(result).toHaveLength(0);
  });
});

// „Ç´„Çπ„Çø„É†„Éï„ÉÉ„ÇØ„ÅÆ„ÉÜ„Çπ„ÉàÁî®„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
function TestComponent({ findings }: { findings: EnhancedFinding[] }) {
  const {
    selectedCategories,
    setSelectedCategories,
    filteredFindings,
    availableCategories
  } = useCategoryFilter(findings);

  return (
    <div>
      <div data-testid="selected-count">{selectedCategories.length}</div>
      <div data-testid="filtered-count">{filteredFindings.length}</div>
      <div data-testid="available-count">{availableCategories.length}</div>
      <button onClick={() => setSelectedCategories(['culture'])}>
        Select Culture Only
      </button>
    </div>
  );
}

describe('useCategoryFilter', () => {
  it('ÂàùÊúüÁä∂ÊÖã„ÅßÂÖ®„Ç´„ÉÜ„Ç¥„É™„ÅåÈÅ∏Êäû„Åï„Çå„Çã', () => {
    render(<TestComponent findings={mockFindings} />);

    expect(screen.getByTestId('selected-count')).toHaveTextContent('3');
    expect(screen.getByTestId('filtered-count')).toHaveTextContent('3');
    expect(screen.getByTestId('available-count')).toHaveTextContent('3');
  });

  it('„Ç´„ÉÜ„Ç¥„É™ÈÅ∏Êäû„ÇíÂ§âÊõ¥„Åß„Åç„Çã', () => {
    render(<TestComponent findings={mockFindings} />);

    const button = screen.getByText('Select Culture Only');
    fireEvent.click(button);

    expect(screen.getByTestId('selected-count')).toHaveTextContent('1');
    expect(screen.getByTestId('filtered-count')).toHaveTextContent('1');
  });

  it('findings„ÅåÂ§âÊõ¥„Åï„Çå„Çã„Å®Âà©Áî®ÂèØËÉΩ„Å™„Ç´„ÉÜ„Ç¥„É™„ÅåÊõ¥Êñ∞„Åï„Çå„Çã', () => {
    const { rerender } = render(<TestComponent findings={mockFindings} />);

    expect(screen.getByTestId('available-count')).toHaveTextContent('3');

    const newFindings = mockFindings.slice(0, 2); // culture„Å®worklife„ÅÆ„Åø
    rerender(<TestComponent findings={newFindings} />);

    expect(screen.getByTestId('available-count')).toHaveTextContent('2');
    expect(screen.getByTestId('selected-count')).toHaveTextContent('2');
  });
});
